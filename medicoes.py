import streamlit as st
import pandas as pd
import numpy as np
import fitz  # PyMuPDF
import openai
from google.cloud import documentai_v1 as documentai
from google.oauth2 import service_account
import json
from collections import defaultdict
from io import BytesIO
import io

st.set_page_config(page_title="Concilia√ß√£o de Boletins", layout="wide")

# === üìö Menu lateral ===
st.sidebar.title("üìÅ Navega√ß√£o")
pagina = st.sidebar.radio(
    "Escolha a funcionalidade:",
    [
        "üìÑ Upload de Documentos",
        "üîé Visualiza√ß√£o",
        "‚öñÔ∏è Concilia√ß√£o",
        "üì§ Exporta√ß√£o"
    ]
)

if pagina == "üìÑ Upload de Documentos":
    st.header("üìÑ Upload de Documentos para An√°lise")

    # Sele√ß√£o do tipo de processor
    tipo_processor = st.selectbox("ü§ñ Tipo de Processor do Document AI", options=["Form Parser", "Document OCR"])
    PROCESSOR_IDS = {
        "Form Parser": st.secrets["google"].get("form_parser_id"),
        "Document OCR": st.secrets["google"].get("contract_processor")
    }

    processor_id = PROCESSOR_IDS.get(tipo_processor)
    if not processor_id:
        st.error(f"‚ùå Processor ID n√£o encontrado para o tipo selecionado: `{tipo_processor}`.")
        st.stop()

    # Uploads
    arquivos_boletim = st.file_uploader("üìë Boletins de Medi√ß√£o", type=["pdf"], accept_multiple_files=True)
    arquivos_contrato = st.file_uploader("üìë Contratos de Servi√ßo", type=["pdf"], accept_multiple_files=True)

    intervalos_boletim = {}
    intervalos_contrato = {}

    # Intervalos de p√°ginas
    if arquivos_boletim:
        st.subheader("üü¢ Intervalos de P√°ginas - Boletins")
        for arquivo in arquivos_boletim:
            col1, col2 = st.columns(2)
            with col1:
                inicio = st.number_input(f"In√≠cio ({arquivo.name})", min_value=1, value=1, key=f"inicio_b_{arquivo.name}")
            with col2:
                fim = st.number_input(f"Fim ({arquivo.name})", min_value=inicio, value=inicio, key=f"fim_b_{arquivo.name}")
            intervalos_boletim[arquivo.name] = (inicio, fim)

    if arquivos_contrato:
        st.subheader("üü° Intervalos de P√°ginas - Contratos")
        for arquivo in arquivos_contrato:
            col1, col2 = st.columns(2)
            with col1:
                inicio = st.number_input(f"In√≠cio ({arquivo.name})", min_value=1, value=1, key=f"inicio_c_{arquivo.name}")
            with col2:
                fim = st.number_input(f"Fim ({arquivo.name})", min_value=inicio, value=inicio, key=f"fim_c_{arquivo.name}")
            intervalos_contrato[arquivo.name] = (inicio, fim)

    if st.button("üöÄ Processar Documentos"):
        st.subheader("üîé Extra√ß√£o com Document AI")
        tabelas_final = []

        for arquivo in arquivos_boletim + arquivos_contrato:
            is_boletim = arquivo in arquivos_boletim
            nome_doc = arquivo.name
            inicio, fim = (
                intervalos_boletim[nome_doc] if is_boletim else intervalos_contrato[nome_doc]
            )

            with st.spinner(f"Processando {nome_doc}..."):
                pdf_bytes = extrair_paginas_pdf(arquivo, inicio, fim)
                tabelas = processar_documento_documentai(pdf_bytes, processor_id, nome_doc)
                tabelas_final.extend(tabelas)

        st.success("‚úÖ Processamento conclu√≠do!")

        # Armazenar os resultados no session_state
        st.session_state["tabelas_extraidas"] = tabelas_final

if pagina == "üîé Visualiza√ß√£o":
    st.header("üîé Visualiza√ß√£o das Tabelas Extra√≠das")

    # Verifica se h√° dados extra√≠dos
    if "tabelas_extraidas" not in st.session_state:
        st.warning("‚ö†Ô∏è Nenhuma tabela foi processada ainda. V√° para 'üìÑ Upload de Documentos' e clique em 'Processar Documentos'.")
        st.stop()

    # === Base oficial de contrato ===
    df_contrato = pd.DataFrame([
        {"ID_ITEM": "1.1", "REFERENCIA": "PROFISSIONAL", "DESCRICAO": "Operador T√©cnico", "UNIDADE": "Di√°ria", "VALOR_UNITARIO": 1672.00, "VALOR_STANDBY": 1337.60},
        {"ID_ITEM": "1.2", "REFERENCIA": "PROFISSIONAL", "DESCRICAO": "T√©cnico Especializado (Supervisor)", "UNIDADE": "Di√°ria", "VALOR_UNITARIO": 1995.00, "VALOR_STANDBY": 1596.00},
        {"ID_ITEM": "2.1", "REFERENCIA": "LOCA√á√ÉO DE EQUIPAMENTOS", "DESCRICAO": "Flanges Kit", "UNIDADE": "Di√°ria", "VALOR_UNITARIO": 475.00, "VALOR_STANDBY": 403.75},
        {"ID_ITEM": "2.2", "REFERENCIA": "LOCA√á√ÉO DE EQUIPAMENTOS", "DESCRICAO": "Chemical Cleaning Equipment (EX)", "UNIDADE": "Di√°ria", "VALOR_UNITARIO": 807.50, "VALOR_STANDBY": 686.38},
        {"ID_ITEM": "2.3", "REFERENCIA": "LOCA√á√ÉO DE EQUIPAMENTOS", "DESCRICAO": "Hydrojetting Equipment", "UNIDADE": "Di√°ria", "VALOR_UNITARIO": 1795.50, "VALOR_STANDBY": 1526.18},
        {"ID_ITEM": "3.1", "REFERENCIA": "MOB/DESMOB", "DESCRICAO": "Pessoal", "UNIDADE": "Evento", "VALOR_UNITARIO": 1850.00, "VALOR_STANDBY": 1850.00},
        {"ID_ITEM": "3.2", "REFERENCIA": "MOB/DESMOB", "DESCRICAO": "Equipamento", "UNIDADE": "Evento", "VALOR_UNITARIO": 3350.00, "VALOR_STANDBY": 3350.00},
    ])

    # === Organiza√ß√£o das tabelas ===
    tabelas_extraidas = st.session_state["tabelas_extraidas"]
    tabelas_tratadas = defaultdict(list)

    for tabela_info in tabelas_extraidas:
        nome_doc = tabela_info["documento"]
        df_raw = pd.DataFrame(tabela_info["tabela"])

        with st.spinner(f"üß† Organizando tabelas de {nome_doc} com GPT..."):
            df_tratada = organizar_tabela_com_gpt(nome_doc, df_raw)
            tabelas_tratadas[nome_doc].append(df_tratada)

    # Armazenar para etapas seguintes
    st.session_state["tabelas_tratadas"] = tabelas_tratadas
    st.session_state["df_contrato"] = df_contrato  # salva para reutiliza√ß√£o em outras p√°ginas

    # Exibi√ß√£o por documento
    for nome_doc, lista_df in tabelas_tratadas.items():
        try:
            df_unificado = pd.concat(lista_df, ignore_index=True)
            st.markdown(f"### üìÑ Documento: <span style='color:green'><b>{nome_doc}</b></span>", unsafe_allow_html=True)
            st.dataframe(df_unificado)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro ao unificar tabelas do documento `{nome_doc}`: {e}")

if pagina == "‚öñÔ∏è Concilia√ß√£o":
    st.header("‚öñÔ∏è Concilia√ß√£o entre Boletins e Contrato")

    if "tabelas_tratadas" not in st.session_state:
        st.warning("‚ö†Ô∏è Nenhum dado tratado dispon√≠vel. V√° para 'üîé Visualiza√ß√£o' primeiro.")
        st.stop()

    tabelas_tratadas = st.session_state["tabelas_tratadas"]
    nomes_docs = list(tabelas_tratadas.keys())

    if not nomes_docs:
        st.info("Nenhum documento dispon√≠vel.")
        st.stop()

    doc_selecionado = st.selectbox("üìÑ Selecione o documento para concilia√ß√£o:", nomes_docs)

    try:
        df_boletim = pd.concat(tabelas_tratadas[doc_selecionado], ignore_index=True)
        df_conciliado = estruturar_boletim_conciliado(df_boletim, df_contrato)

        st.subheader(f"üìã Resultado da Concilia√ß√£o: {doc_selecionado}")
        st.dataframe(df_conciliado)

        # Filtros opcionais
        if st.checkbox("üîç Mostrar apenas diverg√™ncias"):
            df_filtrado = df_conciliado[
                (df_conciliado["FLAG_VALOR_DIVERGENTE"] == "Sim") |
                (df_conciliado["FLAG_TOTAL_RECALCULADO_DIFERENTE"] == "Sim") |
                (df_conciliado["FLAG_DESCRICAO_DUPLICADA"] == "Sim")
            ]
            st.dataframe(df_filtrado)

        st.session_state["df_conciliado_atual"] = df_conciliado

    except Exception as e:
        st.error(f"Erro ao realizar concilia√ß√£o: {e}")
if pagina == "üì§ Exporta√ß√£o":
    st.header("üì§ Exporta√ß√£o dos Resultados de Concilia√ß√£o")

    if "df_conciliado_atual" not in st.session_state:
        st.warning("‚ö†Ô∏è Nenhuma concilia√ß√£o dispon√≠vel. V√° para a aba ‚öñÔ∏è Concilia√ß√£o para gerar os resultados.")
        st.stop()

    df_export = st.session_state["df_conciliado_atual"]

    st.subheader("üìà Visualiza√ß√£o Final")
    st.dataframe(df_export)

    st.subheader("üì• Baixar Resultado em Excel")

    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df_export.to_excel(writer, sheet_name="Concilia√ß√£o", index=False)
        writer.close()

    st.download_button(
        label="üì§ Baixar Arquivo Excel",
        data=buffer,
        file_name="resultado_conciliacao.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
